---
layout: post
title: "Project: Films in a Flash"
categories: art
author:
- Alvina
---

This idea was inspired by Tumblr user MovieBarcode (https://moviebarcode.tumblr.com/). I decided to create my own version of this art using my Arduino set, photoresistors, and p5.js library. 

## Quick Description

I created a python program that produces generative art when a video clip is displayed on screen in front of three photoresistors that are connected to an Arduino Uno microcontroller. The program reads the photoresistor’s RGB values from the Arduino serial monitor and combines them into one color value. I used the p5.js python library to append a stripe of that color every 0.3 seconds onto a canvas, creating an image of vertically-arranged differently coloured stripes, unique to the clip being played. 

The image on the left was produced from a clip from the movie “Shrek”, and the image on the right was produced from a clip of the tv show “Haikyu!!”.


## Materials Used

- Arduino Uno 
- PhotoResistors
- Breadboard
- Basic resistors/wires/etc

## Helpful Links for Explorers
- [jekyll](https://p5js.org/)

## Step By Step Playthrough

### Arduino Code
The circuit is very simple - it’s simply three phototransistors connected to analog input pins. The majority of this project is actually coding!

The first step is to create the code for the phototransistors to read the light values. We need to map the numbers they produce to values from 0-100 since we’ll be giving RBG values as percentages when it comes time to print the colours. 

The following Arduino code is quite straightforward:

```html
const int redPIN = A0;

const int greenPIN = A1;

const int bluePIN = A2;

int redVal, greenVal, blueVal;


void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  redVal = analogRead(redPIN);
  greenVal = analogRead(greenPIN);
  blueVal = analogRead(bluePIN);


  redVal = map(redVal, 0, 50, 0, 100);

  greenVal = map(greenVal, 0, 50, 0, 100);

  blueVal = map(blueVal, 0, 50, 0, 100);

  Serial.print(redVal);
  Serial.print(" ");
  Serial.print(greenVal);
  Serial.print(" ");
  Serial.println(blueVal);
  delay(100);

}
```

The next step is all of the python code!

### The Ugly Code

Our first script will collect the data that the Arduino code prints on the serial monitor. Because the Arduino code prints the R G B values on one line, we will put each line into a list of its own with 3 entries (called temp_list)- one for each colour value. These small lists will be put into one large list, which I’ve named the rgb_list. The following site explains how to read the serial monitor through python: https://problemsolvingwithpython.com/11-Python-and-External-Hardware/11.04-Reading-a-Sensor-with-Python/. 

The code below already follows these steps. 

 ```html
import serial
import time

ser = serial.Serial("/dev/cu.usbmodem14201", 9600)
time.sleep(2)

rgb_data = []

for i in range(500):
    b = ser.readline()
    string_n = b.decode()
    string = string_n.rstrip() # removes \n and \r
    # but doesn't remove spaces
    print(string)
    temp_list = string.split(" ")
    temp_list_2 = []
    for elem in temp_list:
        temp_elem = int(elem)
        temp_list_2.append(temp_elem)

    print(temp_list_2)
    rgb_data.append(temp_list_2)
    time.sleep(0.1)

print(rgb_data)

ser.close()

```
NOTE: Once you get your art up and loaded, you might see that your stripes are too dark. This happened to me because my computer did not generate enough light for the phototransistors to read values anywhere near 1023. Considering this, you might want to tailor your values; i.e., find the maximum value of light that the phototransistors will detect, then in the map() function, instead of listing 1023 as the high for the value you are scaling from, list the maximum value instead. This way, there will be a better range of brightness in your art.

<b>Some important notes regarding this website:  </b>
1. You may need to install Pyserial first: https://problemsolvingwithpython.com/11-Python-and-External-Hardware/11.01-PySerial/
    * I recommend doing this through the terminal and not through VS code itself. Simple type “python”  in the command line, hit enter, and then follow the commands in the site.
2. The name of your Arduino port may not be in the format that they have specified. For example, my port is /dev/cu.usbmodem14201, as you’ll see in the code.

After you have completed these steps, it’s time to get our hands dirty! The way we’re going to display the colour of each frame is by printing a very thin rectangle with the combined RGB colour onto the screen. To accomplish this, we’ll use Pyp5JS, which is a fairly good program for beginners. To start, follow the instructions in the given site to install the needed packages: https://berinhard.github.io/pyp5js/. 


Note: To avoid confusion, simply follow the steps from the “Installation” section and the “QuickStart” section. After completing the instructions in the “QuickStart” section, you’ll get a specific address, simply copy and paste that into your browser and you’ll be on the site where all of our artwork will be printed!

The basic functions we need to know to print our coloured rectangles are:
 ```html
	<p>createCanvas(800, 800)</p>
	<p>background(100)</p>
  <p>colorMode(RGB, 100)</p>
  <p>stroke(172, 144, 135)</p>
  <p>fill(172, 144, 135)</p>
  <p>rect(0, 0, 1, 800)</p>
 ```
In that order. 



In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

#### You might want a sub-subheading (h4)

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

#### But it's probably overkill (h4)

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

##### Could be a smaller sub-heading, `pacman` (h5)

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

###### Small yet significant sub-heading  (h6)

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

### Oh hai, an unordered list!!

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

- First item, yo
- Second item, dawg
- Third item, what what?!
- Fourth item, fo sheezy my neezy

### Oh hai, an ordered list!!

In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris.

1. First item, yo
2. Second item, dawg
3. Third item, what what?!
4. Fourth item, fo sheezy my neezy



## Headings are cool! (h2)

Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.

Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.

Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc.

### Tables

Title 1               | Title 2               | Title 3               | Title 4
--------------------- | --------------------- | --------------------- | ---------------------
lorem                 | lorem ipsum           | lorem ipsum dolor     | lorem ipsum dolor sit
lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit
lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit
lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit | lorem ipsum dolor sit


Title 1 | Title 2 | Title 3 | Title 4
--- | --- | --- | ---
lorem | lorem ipsum | lorem ipsum dolor | lorem ipsum dolor sit
lorem ipsum dolor sit amet | lorem ipsum dolor sit amet consectetur | lorem ipsum dolor sit amet | lorem ipsum dolor sit
lorem ipsum dolor | lorem ipsum | lorem | lorem ipsum
lorem ipsum dolor | lorem ipsum dolor sit | lorem ipsum dolor sit amet | lorem ipsum dolor sit amet consectetur
